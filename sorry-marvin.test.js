const sorry = require('./sorry-marvin')

test('error: invalid syntax', () => {
  expect(() => sorry('x')).toThrow('Syntax error')
  expect(() => sorry(' ')).toThrow('Syntax error')
  expect(() => sorry('! ')).toThrow('Syntax error')
  expect(() => sorry(' !')).toThrow('Syntax error')
  expect(() => sorry(' ! ')).toThrow('Syntax error')
  expect(() => sorry('> ')).toThrow('Syntax error')
  expect(() => sorry(' >')).toThrow('Syntax error')
  expect(() => sorry(' > ')).toThrow('Syntax error')
  expect(() => sorry('<')).toThrow('Syntax error')
  expect(() => sorry(' !> ')).toThrow('Syntax error')
  expect(() => sorry(' >! ')).toThrow('Syntax error')
})

test('empty program', () => {
  expect(sorry('')).toStrictEqual([0, 0, 0, 0])
  expect(sorry('!>!>!>!>')).toStrictEqual([0, 0, 0, 0]) // no-op
})

test('increment', () => {
  expect(sorry('!>!>!>!')).toStrictEqual([1, 0, 0, 0])
  expect(sorry('!>!>!>!!>!>!>!')).toStrictEqual([2, 0, 0, 0])
  expect(sorry('!>!>!>!!>!>!>!!>!>!>!')).toStrictEqual([3, 0, 0, 0])
  expect(sorry('!>!>!>!', [3, 0, 0, 0])).toStrictEqual([4, 0, 0, 0])
})

test('decrement', () => {
  expect(sorry('>', [1, 0, 0, 0])).toStrictEqual([0, 0, 0, 0])
  expect(sorry('!>!>!>!>>', [2, 0, 0, 0])).toStrictEqual([1, 0, 0, 0])
  expect(sorry('>!>!>!>!>>', [2, 0, 0, 0])).toStrictEqual([0, 0, 0, 0])
  expect(sorry('!>!>>', [1, 2, 3, 4])).toStrictEqual([1, 2, 2, 4])
})

test('infinite loop', () => {
    expect(() => sorry('>>', null, 100)).toThrow('Maximal steps exceeded')
    expect(() => sorry('>>>', null, 100)).toThrow('Maximal steps exceeded')
    expect(() => sorry('!>>', null, 100)).toThrow('Maximal steps exceeded')
    expect(() => sorry('!>>>', null, 100)).toThrow('Maximal steps exceeded')
})

test('move', () => {  // B = B + A, A = 0
  const move = cleanup(`
      !>!>!>!       init A+1
      >>>>>>        jump to END
      !             B+1
      !>!>>>>>>>>   goto BEGIN (jump if D==0)
      !>            END (no-op)
  `)
  expect(sorry(move, [0, 0, 0, 0])).toStrictEqual([0, 0, 0, 0])
  expect(sorry(move, [0, 1, 0, 0])).toStrictEqual([0, 1, 0, 0])
  expect(sorry(move, [1, 0, 0, 0])).toStrictEqual([0, 1, 0, 0])
  expect(sorry(move, [42, 0, 0, 0])).toStrictEqual([0, 42, 0, 0])
  expect(sorry(move, [42, 13, 0, 0])).toStrictEqual([0, 55, 0, 0])
})

test('addition', () => {  // A = A + B, B = 0
  const add = cleanup(`
      !>!>!>!>        no-op
      !               init B+1
      >>>>>>>>>>>>    jump to END
      !>!>!           A+1
      !>!>!>>>>>>>>>  goto BEGIN (jump if D==0)
      !>              END (no-op)
  `)
  expect(sorry(add, [0, 0, 0, 0])).toStrictEqual([0, 0, 0, 0])
  expect(sorry(add, [1, 0, 0, 0])).toStrictEqual([1, 0, 0, 0])
  expect(sorry(add, [42, 0, 0, 0])).toStrictEqual([42, 0, 0, 0])
  expect(sorry(add, [0, 1, 0, 0])).toStrictEqual([1, 0, 0, 0])
  expect(sorry(add, [0, 42, 0, 0])).toStrictEqual([42, 0, 0, 0])
  expect(sorry(add, [1, 1, 0, 0])).toStrictEqual([2, 0, 0, 0])
  expect(sorry(add, [42, 13, 0, 0])).toStrictEqual([55, 0, 0, 0])
  expect(sorry(add, [13, 42, 0, 0])).toStrictEqual([55, 0, 0, 0])
})

test('addition nondesctructive', () => { // B = A + B
  const add = cleanup(`
      !>!>!>        move to A
      !             init A+1
      >>>>>         A-1, jump to 'init C+1'
      !             B+1
      !             C+1
      !>>>>>>>>>    goto 'init A+1' (jump if D==0)
      >>>>>>>>>>>>>>>>>>>>>

      !>!> !>!>     no-op
      !>            move to C
      !             init C+1
      >>>>>>>>>>    C-1, jump to END
      !>!           A+1
      !>!>!>>>>>>>>>>>>>>>>>>>>>      goto 'move to C' (jump if D==0)

      !>            END (no-op)
  `)
  expect(sorry(add, [0, 0, 0, 0])).toStrictEqual([0, 0, 0, 0])
  expect(sorry(add, [1, 0, 0, 0])).toStrictEqual([1, 1, 0, 0])
  expect(sorry(add, [42, 0, 0, 0])).toStrictEqual([42, 42, 0, 0])
  expect(sorry(add, [0, 1, 0, 0])).toStrictEqual([0, 1, 0, 0])
  expect(sorry(add, [0, 42, 0, 0])).toStrictEqual([0, 42, 0, 0])
  expect(sorry(add, [1, 1, 0, 0])).toStrictEqual([1, 2, 0, 0])
  expect(sorry(add, [42, 13, 0, 0])).toStrictEqual([42, 55, 0, 0])
  expect(sorry(add, [13, 42, 0, 0])).toStrictEqual([13, 55, 0, 0])
})

test('INC', () => {
  expect(sorry('!>!')).toStrictEqual([0, 0, 1, 0])
  expect(sorry('!>!>!>!')).toStrictEqual([1, 0, 0, 0])
})

test('JZDEC', () => {
  expect(sorry('!>!>!>!>>!!>', [0, 0, 0, 0])).toStrictEqual([0, 0, 0, 0])
  expect(sorry('!>!>!>!>>!!>', [1, 0, 0, 0])).toStrictEqual([0, 1, 0, 0])
  expect(sorry('!>!>!>!>>!!>', [42, 0, 0, 0])).toStrictEqual([41, 1, 0, 0])
})

test('fibonacci', () => {
  const fib = cleanup(`
      move B to C:
      !>!>!> !>           no-op
      !                   init B+1
      >>>>>>              jump to 'move A to B'
      !                   C+1
      !>>>>>>>>> >>>>>>>>>> >>>>>>>>>> >>>>>>>>>> >>>>>>>>>>   goto 'move B to C'

      move A to B
      !>!>!> !>           no-op
      !>!>!>!             init A+1
      >>>>>>>>>>>>>       jump to 'move C to A and B'
      !                   B+1
      !>!>>>>>>>>>> >>>>>>>>>> >>>>>>>>>> >>>>>>>>>> >>         goto 'move A to B'

      move C to A and B
      !>!>!> !>           no-op
      !>!                 init C+1
      >>>>>>>>>           jump to 'end'
      !>!!                A+1, B+1
      !>!>>>>>>>>>> >>>>>>>>>> >>>>>>>>>> >>>>>>>>>> >>>        goto 'move C to A and B'

      !>>>>>>             end
  `)
  const result = []
  sorry(fib, [1, 1], 10000, collectMaxima(result))
  expect(result.slice(0, 10)).toStrictEqual([1, 2, 3, 5, 8, 13, 21, 34, 55, 89])
})

test('Hello World', () => {
  const hello = cleanup(`
    !>!>!>!
    !>!>!>!
    !>!>!>!
    !>!>!>!

    !>!>!>!>      no-op
    >>>>>>!>!>!   dec


    !>!>!>!
    !>!>!>!
    !>!>!>!

    !>!>!>!>      no-op
    >>>>>>!>!>!   dec

    
    !>!>!>!
    !>!>!>!
    !>!>!>!
    !>!>!>!
    !>!>!>!

    !>!>!>!>      no-op
    >>>>>>!>!>!   dec
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    !>!>!>!
    !>!>!>!
    !>!>!>!
    !>!>!>!
    !>!>!>!

    !>!>!>!>      no-op
    >>>>>>!>!>!   dec


    !>!>!>!
    !>!>!>!
    !>!>!>!
    !>!>!>!
    !>!>!>!
    !>!>!>!

    !>!>!>!>      no-op
    >>>>>>!>!>!   dec
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>    

    !>!>!>!

    !>!>!>!>      no-op
    >>>>>>!>!>!   dec


    !>!>!>!
    !>!>!>!
    !>!>!>!
    !>!>!>!
    !>!>!>!
    !>!>!>!
    !>!>!>!
    !>!>!>!

    !>!>!>!>      no-op
    >>>>>>!>!>!   dec


    !>!>!>!
    !>!>!>!
    !>!>!>!
    !>!>!>!
    !>!>!>!
    !>!>!>!

    !>!>!>!>      no-op
    >>>>>>!>!>!   dec


    !>!>!>!
    !>!>!>!
    !>!>!>!
    !>!>!>!
    !>!>!>!
    !>!>!>!
    !>!>!>!

    !>!>!>!>      no-op
    >>>>>>!>!>!   dec


    !>!>!>!
    !>!>!>!
    !>!>!>!
    !>!>!>!
    !>!>!>!

    !>!>!>!>      no-op
    >>>>>>!>!>!   dec


    !>!>!>!
    !>!>!>!

    !>!>!>!>      no-op
    >>>>>>!>!>!   dec

    
    !>
  `)
  const result = []
  sorry(hello, null, null, collectChanges(result))

  const alphabet = []
  alphabet[1] = ' '
  alphabet[2] = 'd'
  alphabet[3] = 'e'
  alphabet[4] = 'H'
  alphabet[5] = 'l'
  alphabet[6] = 'o'
  alphabet[7] = 'r'
  alphabet[8] = 'W'

  let msg = ''
  for (let i = 0; i < result.length; i++) {
      const c = result[i]
      if (c > 1) msg += alphabet[c - 1]
  }

  expect(msg).toEqual('Hello World')
})

function collectChanges(result) {
  let last = 0, zero = true
  return  r => {
    if (r[0] < last && zero) {  // value change
      result.push(last)
      zero = false
    }
    last = r[0]
    if (last === 0) zero = true
  }
}

function collectMaxima(result) {
  let max = -1
  return  r => {
    if (r[0] > max) max = r[0]
    if (r[0] === 0 && (!result.length || result[result.length - 1] + 1 < max)) {
      result.push(max - 1)
    }
  }
}

function cleanup(p) {
  return p.replaceAll(/[^!>]/g, '')
}